import React, { useMemo, useEffect } from 'react';

import withListener from '../withListener';
import { useResponsive } from '../../tools/widths/useResponsive';
import { createNamespace } from '../../tools/namingTools';
import { parseToBool } from '../../tools/helpers';
import { unescapeHtml } from '../../tools/stringTools';
import { parsePricingActions } from '../../tools/callToActions';
import { isProductEditionAddedToCart } from '../../tools/cart';
import { BACKGROUND_IMAGE } from '../../constants/backgroundSettings';
import { CTA_NO_ACTION } from '../../constants/actions';
import { productBannerFormSchema } from '../../constants/components/schemas/product-banner';
import { productBannerPropTypes } from '../../constants/components/prop-types/product-banner';
import ProductCard from '../../atoms/product-card/ProductCard';
import ButtonsList from '../../atoms/buttons-list/ButtonsList';
import BreadCrumbs from '../../atoms/bread-crumbs/BreadCrumbs';
import { marketplaceProductDataStore } from '../../store/marketplaceProductData';
import { cartPreviewStore } from '../../store/cartPreview';
// IMPORTANT: (s)css should be imported after other atoms/components
import './styles/ProductBanner.scss';

const n = createNamespace('ProductBanner');

const AVAILABLE_TYPES = [BACKGROUND_IMAGE.value];

export const ProductBannerComponent = ({
    settings,
    data: {
        applicationType,
        callToActions = { items: [] },
        categories,
        config,
        i18n: i18nProp,
        listingPageUrl,
        relatedContent,
        summary,
        defaultSelectedEdition,
        locale,
        editions,
        addonProducts
    }
}) => {
    const { marketplaceProductData } = marketplaceProductDataStore();

    const { cart, fetchCart } = cartPreviewStore();

    // fetch once, cart is updated by zustand store
    useEffect(() => {
        fetchCart(locale);
    }, [fetchCart, locale]);

    const isAddedToCart = isProductEditionAddedToCart(
        editions?.items,
        cart,
        config?.uuid,
        applicationType,
        addonProducts
    );

    const hasRequiredProduct = Boolean(
        Array.isArray(marketplaceProductData?.product?.editions)
        && marketplaceProductData.product.editions.some(element => (element.upstreamAssociations?.length))
    );

    // build the crumb's back button link. If we come from a listing page, clicking back will go history -1.
    // Otherwise (for example if we come from an external site) the crumb's root will be a link to the listings page
    const breadcrumbRoot = useMemo(() => {
        const i18n = { ...ProductBannerComponent.defaultProps.data.i18n, ...i18nProp };
        if (!listingPageUrl) {
            return {};
        }

        const { referrer } = document;
        const i18nWithDefaults = { ...ProductBannerComponent.defaultProps.data.i18n, ...i18n };

        // we come from a listings page
        if (referrer.indexOf(listingPageUrl) !== -1) {
            return {
                baseLinkText: i18nWithDefaults.backToResults,
                baseLinkAction: () => window.history.go(-1)
            };
        }

        return {
            baseLinkText: i18nWithDefaults.allProducts,
            baseLinkUrl: listingPageUrl
        };
    }, [listingPageUrl, i18nProp]);

    const { largeDown: isMobile } = useResponsive();

    if (!summary) {
        return null;
    }

    const cardSummary = {
        ...summary,
        hasRequiredProduct
    };

    const settingsWithDefaults = { ...ProductBannerComponent.defaultProps.settings, ...settings };
    const {
        backgroundType,
        bannerBackgroundColor,
        backgroundImg,
        settingsHeight,
        productNameSize,
        descTextSize,
        textColor
    } = settingsWithDefaults;
    const [showRatings] = parseToBool(settings.showRatings);
    const pricingActions = parsePricingActions(callToActions);

    const textSettings = {
        showRatings,
        settingsHeight,
        productNameSize,
        descTextSize,
        textColor
    };

    const hasButtons = Boolean(
        pricingActions?.items?.[0]?.actionType !== CTA_NO_ACTION
    );

    const containerModifiers = [
        textColor && textColor.toLowerCase()
    ];

    const wrapperModifiers = [
        settingsHeight && settingsHeight.toLowerCase()
    ];

    const buildBackgroundStyle = () => {
        const imageOrColor = AVAILABLE_TYPES.includes(backgroundType)
            ? { backgroundImage: `url(${unescapeHtml(backgroundImg.url)})` }
            : { backgroundColor: bannerBackgroundColor };

        return {

            ...imageOrColor
        };
    };

    const breadcrumb = [];

    if (categories && categories.items && categories.items.length) {
        breadcrumb.push({
            ...categories,
            label: categories.label || ProductBannerComponent.defaultProps.data.categories.label
        });
    }

    const breadCrumbsProps = {
        ...breadcrumbRoot,
        crumbs: breadcrumb
    };

    const i18nSummaryWithDefaults = { ...ProductBannerComponent.defaultProps.data.summary.i18n, ...summary.i18n };

    return (
        <div {...n('container', containerModifiers).withTestId().withE2EId().props}>
            <div
                {...n('backgroundWrapper').withTestId().props}
                style={buildBackgroundStyle()}
            />
            <div {...n('breadCrumbs').props}>
                <BreadCrumbs {...breadCrumbsProps} />
            </div>
            <section {...n('wrapper', wrapperModifiers).withTestId().props}>
                <h1 {...n('title', 'hidden').props}>{i18nSummaryWithDefaults.title}</h1>
                <div {...n('row').props}>
                    <div {...n('card').props}>
                        <ProductCard
                            cardData={cardSummary}
                            reviewData={relatedContent}
                            settings={textSettings}
                            referUrl={config && config.referUrl}
                        />
                    </div>
                    {hasButtons && !isMobile && (
                        <div {...n('buttons').props}>
                            <ButtonsList data={{
                                applicationType,
                                callToActions: pricingActions,
                                primaryButtonType: 'emphasis',
                                referUrl: config && config.referUrl,
                                defaultSelectedEdition,
                                isAddedToCart,
                                i18n: i18nProp
                            }}
                            />
                        </div>
                    )}
                </div>
            </section>
        </div>
    );
};

ProductBannerComponent.schema = () => ({
    name: 'ProductBanner',
    title: 'uieditor.sfbComponent.productBanner.title',
    iconName: 'banner',
    form: productBannerFormSchema,
    marketplaceData: {
        applicationType: 'application.config.type',
        callToActions: 'application.callToActions',
        categories: 'application.categories',
        config: 'application.config',
        configurator: 'application.configurator',
        i18n: 'i18n',
        listingPageUrl: 'config.listingEndpoint',
        relatedContent: 'application.relatedContent',
        summary: 'application.summary',
        defaultSelectedEdition: 'application.defaultSelectedEdition',
        locale: 'config.locale.code',
        editions: 'application.editions',
        addonProducts: 'application.addonProducts'
    }
});

ProductBannerComponent.propTypes = productBannerPropTypes;

const SETTINGS = ProductBannerComponent.schema().form;

ProductBannerComponent.defaultProps = {
    settings: {
        backgroundType: SETTINGS.backgroundType.defaultValue,
        bannerBackgroundColor: SETTINGS.bannerBackgroundColor.defaultValue,
        textColor: SETTINGS.textColor.defaultValue,
        backgroundImg: SETTINGS.backgroundImg.defaultValue,
        showRatings: SETTINGS.showRatings.defaultValue,
        settingsHeight: SETTINGS.settingsHeight.defaultValue,
        productNameSize: SETTINGS.productNameSize.defaultValue,
        descTextSize: SETTINGS.descTextSize.defaultValue
    },
    data: {
        summary: {
            i18n: {
                title: 'Summary'
            }
        },
        categories: {
            label: 'Categories',
            items: null
        },
        config: {},
        configurator: {
            url: ''
        },
        callToActions: null,
        relatedContent: {
            details: {
                reviews: {
                    rating: 0,
                    numRatings: 0,
                    caption: '',
                    title: ''
                },
                vendor: {
                    title: '',
                    items: [
                        {
                            label: ''
                        }
                    ]
                }
            }
        },
        applicationType: '',
        i18n: {
            backToResults: 'Back to Results',
            allProducts: 'All Products',
            cart: {
                addedToCart: 'Added to Cart'
            }
        },
        defaultSelectedEdition: null
    }
};

export default withListener(ProductBannerComponent);
